name: Promote to Databricks Prod on push to main

on:
  push:
    branches: [main]
  workflow_dispatch: {}  # lets you run it manually to test

jobs:
  promote:
    # If you want a guard, use a push-safe one like this (optional):
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    # (Optional) use env-scoped secrets by targeting an environment:
    # environment: prod

    env:
      GIT_URL: https://github.com/${{ github.repository }}
      DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST_PROD }}
      DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN_PROD }}
      PROD_REPO_PATH: ${{ secrets.PROD_REPO_PATH }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Databricks CLI
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install databricks-cli
          databricks --version

      - name: Ensure prod Repos folder exists and sync to latest main
        shell: bash
        run: |
          set -euo pipefail

          if [[ -z "${PROD_REPO_PATH:-}" ]]; then
            echo "‚ùå PROD_REPO_PATH secret is not set."
            exit 1
          fi

          # echo ${PROD_REPO_PATH}
          # echo ${DATABRICKS_HOST}
          echo "üîé Updating ${PROD_REPO_PATH} to 'main'..."
          if databricks repos update --repo-id "${PROD_REPO_PATH}" --branch main; then
            echo "‚úÖ Updated existing repo to latest 'main'."
          else
            echo "‚ÑπÔ∏è Repo not found; creating it..."
            # databricks repos create \
            #   --url "${GIT_URL}" \
            #   --provider gitHub \
            #   --path "${PROD_REPO_PATH}" \
            #   --branch main
            # echo "‚úÖ Created repo and checked out 'main'."
          fi
